data <- read.csv("TSA_2023.csv")
data$date <- as.Date(data[, 1], format = '%Y/%m/%d')
head(data)
data <- read.csv("TSA_2023.csv")
#data$date <- as.Date(data[, 1], format = '%Y/%m/%d')
data[, 1] <- as.Date(data[, 1])
head(data)
data <- read.csv("TSA_2023.csv")
#data$date <- as.Date(data[, 1], format = '%Y/%m/%d')
data$date <- as.Date(data[, 1])
head(data)
data <- read.csv("TSA_2023.csv")
#data$date <- as.Date(data[, 1], format = '%Y/%m/%d')
data$date <- as.Date(data[, 1])
head(data)
data <- read.csv("TSA_2023.csv")
#data$date <- as.Date(data[, 1], format = '%Y/%m/%d')
data[, 1] <- as.Date(data[, 1])
head(data)
data <- read.csv("TSA_2023.csv")
#data$date <- as.Date(data[, 1], format = '%Y/%m/%d')
data$date[, 1] <- as.Date(data[, 1])
data <- read.csv("TSA_2023.csv")
#data$date <- as.Date(data[, 1], format = '%Y/%m/%d')
data$date[, 1] <- as.Date(data[, 1])
data <- read.csv("TSA_2023.csv")
#data$date <- as.Date(data[, 1], format = '%Y/%m/%d')
data$date <- as.Date(data[, 1])
head(data)
data <- read.csv("TSA_2023.csv")
#data$date <- as.Date(data[, 1], format = '%Y/%m/%d')
new_data <- data
new_data$date <- as.Date(new_data[, 1], format = "%Y-%m-%d")
head(data)
data <- read.csv("TSA_2023.csv")
data$date <- as.Date(data[, 1], format = '%Y/%m/%d')
head(data)
data <- read.csv("TSA_2023.csv")
data$date <- as.Date(data[, 1], format = '%Y/%m/%d')
head(data)
data <- read.csv("TSA_2023.csv")
#data$date <- as.Date(data[, 1], format = '%Y/%m/%d')
data$date <- tryCatch(as.Date(data[, 1], format = "%Y/%m/%d"),
error = function(e) NA)
head(data)
data <- read.csv("TSA_2023.csv")
#data$date <- as.Date(data[, 1], format = '%d/%m/%Y')
head(data)
data <- read.csv("TSA_2023.csv")
data$date <- as.Date(data[, 1], format = '%d/%m/%Y')
head(data)
data <- read.csv("TSA_2023.csv")
data[, 1] <- as.Date(data[, 1])
head(data)
data <- read.csv("TSA_2023.csv")
data[, 1] <- as.Date(data[, 1], format = "%Y-%m-%d")
head(data)
data <- read.csv("TSA_2023.csv")
data[, 1] <- as.Date(data[, 1], format = "%Y-%m-%d")
head(data)
data <- read.csv("TSA_2023.csv")
data[, 1] <- as.Date(data[, 1], format = "%d-%m-Y")
head(data)
data <- read.csv("TSA_2023.csv")
data[, 1] <- as.Date(data[, 1], format = "%Y-%m-d")
head(data)
data <- read.csv("TSA_2023.csv")
data[, 1] <- as.Date(data[, 1], format = "%Y-%m-d")
head(data)
data <- read.csv("TSA_2023.csv")
data[, 1] <- as.Date(data[, 1], format = "%Y-%m-%d")
head(data)
data <- read.csv("TSA_2023.csv")
data%date = data[, 1]
data <- read.csv("TSA_2023.csv")
data%date=data[, 1]
data <- read.csv("TSA_2023.csv")
data[, 1] <- as.Date(data[, 1], format = "%Y-%m-%d")
head(data)
data <- read.csv("TSA_2023.csv")
data[, 1] <- as.Date(data[, 1], format = "%Y-%m-%d")
colnames(data)[1] <- "date"
head(data)
data <- read.csv("TSA_2023.csv")
data[, 1] <- as.Date(data[, 1], format = "%Y-%m-%d")
colnames(data)[1] <- "Date"
head(data)
data <- read.csv("TSA_2023.csv")
data[, 1] <- as.Date(data[, 1], format = "%Y-%m-%d")
colnames(data)[1] <- "date"
head(data)
data %>% glimpse()
head(data)
tail(data)
data <- xts(data[, -1], order.by=as.Date(data$date))
head(data)
dx1 <- diff.xts(data$x1)
dx2 <- diff.xts(data$x2)
dx3 <- diff.xts(data$x3)
dx4 <- diff.xts(data$x4)
dx5 <- diff.xts(data$x5)
dx6 <- diff.xts(data$x6)
dx7 <- diff.xts(data$x7)
dx8 <- diff.xts(data$x8)
dx9 <- diff.xts(data$x9)
dx10 <- diff.xts(data$x10)
data$dx1 <- dx1
data$dx2 <- dx2
data$dx3 <- dx3
data$dx4 <- dx4
data$dx5 <- dx5
data$dx6 <- dx6
data$dx7 <- dx7
data$dx8 <- dx8
data$dx9 <- dx9
data$dx10 <- dx10
testdf(variable = data$x2, max.augmentations = 9)
source('testdf.r')
testdf(variable = data$x2, max.augmentations = 9)
data <- read.csv("TSA_2023.csv")
data[, 1] <- as.Date(data[, 1], format = "%Y-%m-%d")
colnames(data)[1] <- "date"
head(data)
adf_result <- adf.test(coredata(xts_data))
adf_result <- adf.test(coredata(data))
adf_result <- adf.test(coredata(xts_data))
# Perform the ADF test
adf_result <- adf.test(ts_data)
# Perform the ADF test
adf_result <- adf.test(data)
data <- read.csv("TSA_2023.csv")
data[, 1] <- as.Date(data[, 1], format = "%Y-%m-%d")
colnames(data)[1] <- "date"
head(data)
library(forecast)
library(vars)
library(tidyverse)
library(knitr)
library(urca)
library(tseries)
library(xts)
data <- read.csv("TSA_2023.csv")
data[, 1] <- as.Date(data[, 1], format = "%Y-%m-%d")
colnames(data)[1] <- "date"
head(data)
data %>% glimpse()
head(data)
tail(data)
# Perform the ADF test
adf_result <- adf.test(data)
# Extract the first column of 'data' as a vector
variable <- data[, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10]
# Extract the first column of 'data' as a vector
variable <- data[x1, x2, x3, x4, x5, x6, x7, x8, x9, x10]
variables <- data[, c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10")]
# Perform ADF test for each variable
adf_results <- lapply(data[-1], adf.test)
# Extract the test statistics and p-values
adf_stats <- sapply(adf_results, function(x) x$statistic)
adf_pvalues <- sapply(adf_results, function(x) x$p.value)
variables <- data[, c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10")]
# Perform ADF test for each variable
adf_results <- lapply(data[-1], adf.test)
# Extract the test statistics and p-values
adf_stats <- sapply(adf_results, function(x) x$statistic)
adf_pvalues <- sapply(adf_results, function(x) x$p.value)
# Print the ADF test results for each variable
for (i in seq_along(adf_results)) {
cat("ADF Test Results for", colnames(data)[i+1], ":\n")
cat("Test statistic:", adf_stats[i], "\n")
cat("p-value:", adf_pvalues[i], "\n\n")
}
# Load the 'vars' package for VAR modeling
library(vars)
# Convert your data frame to a matrix
data_matrix <- as.matrix(data)
# Perform Select VAR to determine the lag order
select_result <- selectVAR(data_matrix, lag.max = max_lag)
library(forecast)
library(vars)
library(tidyverse)
library(knitr)
library(urca)
library(tseries)
library(xts)
data %>% glimpse()
head(data)
tail(data)
variables <- data[, c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10")]
# Perform ADF test for each variable
adf_results <- lapply(data[-1], adf.test)
# Extract the test statistics and p-values
adf_stats <- sapply(adf_results, function(x) x$statistic)
adf_pvalues <- sapply(adf_results, function(x) x$p.value)
# Print the ADF test results for each variable
for (i in seq_along(adf_results)) {
cat("ADF Test Results for", colnames(data)[i+1], ":\n")
cat("Test statistic:", adf_stats[i], "\n")
cat("p-value:", adf_pvalues[i], "\n\n")
}
# Convert your data frame to a matrix
data_matrix <- as.matrix(data)
# Perform Select VAR to determine the lag order
select_result <- selectVAR(data_matrix, lag.max = max_lag)
VARselect(ppi_cpi, # input data for VAR
lag.max = 6)     # maximum lag
VARselect(ppi_cpi, lag.max = 6) %>%
.$criteria %>%
t() %>%
as_tibble() %>%
mutate(nLags = 1:nrow(.)) %>%
select(nLags, everything()) %>%
kbl(digits = 3) %>%
kable_classic("striped", full_width = F)
VARselect(ppi_cpi, # input data for VAR
lag.max = 6)     # maximum lag
VARselect(ppi_cpi, lag.max = 6) %>%
.$criteria %>%
t() %>%
as_tibble() %>%
mutate(nLags = 1:nrow(.)) %>%
select(nLags, everything()) %>%
kbl(digits = 3) %>%
kable_classic("striped", full_width = F)
VARselect(ppi_cpi, # input data for VAR
lag.max = 6)     # maximum lag
VARselect(data, # input data for VAR
lag.max = 6)     # maximum lag
VARselect(data, # input data for VAR
lag.max = 6)     # maximum lag
data <- read.csv("TSA_2023.csv")
sum(is.na(data))
data[, 1] <- as.Date(data[, 1], format = "%Y-%m-%d")
colnames(data)[1] <- "date"
head(data)
# Convert your data frame to a matrix
data_matrix <- as.matrix(data)
# Perform variable selection using VARselect
lag.max = 10
var_select <- VARselect(data_matrix, lag.max = max_lag_order)
# Convert your data frame to a matrix
data_matrix <- as.matrix(data)
# Perform variable selection using VARselect
max_lag_order = 10
var_select <- VARselect(data_matrix, lag.max = max_lag_order)
VARselect(ppi_cpi, lag.max = 6) %>%
.$criteria %>%
t() %>%
as_tibble() %>%
mutate(nLags = 1:nrow(.)) %>%
select(nLags, everything()) %>%
kbl(digits = 3) %>%
kable_classic("striped", full_width = F)
VARselect(data, lag.max = 6) %>%
.$criteria %>%
t() %>%
as_tibble() %>%
mutate(nLags = 1:nrow(.)) %>%
select(nLags, everything()) %>%
kbl(digits = 3) %>%
kable_classic("striped", full_width = F)
VARselect(data, lag.max = 6)
VARselect(data, lag.max = 6)
# Assuming your dataset is stored in a data frame called 'data' with multiple time series variables
# Load the 'vars' package for VAR modeling
library(vars)
# Handle missing values in the dataset
data_clean <- na.omit(data)
# Convert the cleaned data frame to a matrix
data_matrix <- as.matrix(data_clean)
# Perform variable selection using VARselect
var_select <- VARselect(data_matrix, lag.max = max_lag_order)
# Assuming your dataset is stored in a data frame called 'data' with multiple time series variables
# Load the 'vars' package for VAR modeling
library(vars)
# Handle missing values in the dataset
data_clean <- na.omit(data)
# Convert the cleaned data frame to a matrix
data_matrix <- as.matrix(data_clean)
# Perform variable selection using VARselect
var_select <- VARselect(data_matrix, lag.max = 10)
# Assuming your dataset is stored in a data frame called 'data' with multiple time series variables
# Load the 'vars' package for VAR modeling
library(vars)
# Handle missing values in the dataset
data_clean <- na.omit(data)
# Convert the cleaned data frame to a matrix
data_matrix <- as.matrix(data_clean)
# Perform variable selection using VARselect
var_select <- VARselect(data_matrix, lag.max = 6)
library(forecast)
library(vars)
library(tidyverse)
library(knitr)
library(urca)
library(tseries)
library(xts)
# Assuming your dataset is stored in a data frame called 'data' with multiple time series variables
# Load the 'vars' package for VAR modeling
library(vars)
# Handle missing values in the dataset
data_clean <- na.omit(data)
# Convert the cleaned data frame to a matrix
data_matrix <- as.matrix(data_clean)
# Perform variable selection using VARselect
var_select <- VARselect(data_matrix, lag.max = 6)
# Assuming your dataset is stored in a data frame called 'data' with multiple time series variables
# Load the 'vars' package for VAR modeling
library(vars)
# Handle missing values in the dataset
data_clean <- na.omit(data)
missing_values <- is.na(data)
# Convert the cleaned data frame to a matrix
data_matrix <- as.matrix(data_clean)
# Perform variable selection using VARselect
var_select <- VARselect(data_matrix, lag.max = 6)
# Perform variable selection using VARselect
var_select <- VARselect(data_matrix, lag.max = 6)
library(forecast)
library(vars)
library(tidyverse)
library(knitr)
library(urca)
library(tseries)
library(xts)
data <- read.csv("TSA_2023.csv")
sum(is.na(data))
data[, 1] <- as.Date(data[, 1], format = "%Y-%m-%d")
colnames(data)[1] <- "date"
head(data)
data %>% glimpse()
head(data)
tail(data)
variables <- data[, c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10")]
# Perform ADF test for each variable
adf_results <- lapply(data[-1], adf.test)
# Extract the test statistics and p-values
adf_stats <- sapply(adf_results, function(x) x$statistic)
adf_pvalues <- sapply(adf_results, function(x) x$p.value)
# Print the ADF test results for each variable
for (i in seq_along(adf_results)) {
cat("ADF Test Results for", colnames(data)[i+1], ":\n")
cat("Test statistic:", adf_stats[i], "\n")
cat("p-value:", adf_pvalues[i], "\n\n")
}
# Perform variable selection using VARselect
var_select <- VARselect(data_matrix, lag.max = 6)
# Perform variable selection using VARselect
var_select <- VARselect(data, lag.max = 6)
# Perform variable selection using VARselect
var_select <- VARselect(data, lag.max = 6)
sum(is.finite())
is.finite()
# Check if there are any finite values in each variable of the data
has_finite <- sapply(data, function(x) any(is.finite(x)))
# Check if there are any infinite values in each variable of the data
has_infinite <- sapply(data, function(x) any(is.infinite(x)))
# Perform variable selection using VARselect
var_select <- VARselect(data, lag.max = 6)
# Check if there are any infinite values in each variable of the data
has_infinite <- sapply(data, function(x) any(is.infinite(x)))
# Perform variable selection using VARselect
var_select <- VARselect(data, lag.max = 6)
# Perform variable selection using VARselect
var_select <- VARselect(data, lag.max = 6)
# Perform variable selection using VARselect
var_select <- VARselect(data, lag.max = 6)
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Print the variable selection results
print(var_select)
VARselect(data, lag.max = 6) %>%
.$criteria %>%
t() %>%
as_tibble() %>%
mutate(nLags = 1:nrow(.)) %>%
select(nLags, everything()) %>%
kbl(digits = 3) %>%
kable_classic("striped", full_width = F)
VARselect(variables, lag.max = 6) %>%
.$criteria %>%
t() %>%
as_tibble() %>%
mutate(nLags = 1:nrow(.)) %>%
select(nLags, everything()) %>%
kbl(digits = 3) %>%
kable_classic("striped", full_width = F)
VARselect(variables, lag.max = 6) %>%
.$criteria %>%
t() %>%
as_tibble() %>%
mutate(nLags = 1:nrow(.)) %>%
select(nLags, everything()) %>%
kbl(digits = 3) %>%
VARselect(variables, lag.max = 6) %>%
.$criteria %>%
t() %>%
as_tibble() %>%
mutate(nLags = 1:nrow(.)) %>%
select(nLags, everything()) %>%
kbl(digits = 3) %>%
kable_classic("striped", full_width = F)
library(vars)
library(tibble)
library(kableExtra)
install.packages("vars")
install.packages("tidyverse")
install.packages("knitr")
install.packages("urca")
install.packages("tseries")
install.packages("xts")
install.packages("forecast")
install.packages("kableExtra")
install.packages("urca")
install.packages("xts")
install.packages("forecast")
install.packages("knitr")
install.packages("tseries")
install.packages("vars")
install.packages("tidyverse")
install.packages("forecast")
library(vars)
library(tibble)
library(kableExtra)
VARselect(variables, lag.max = 6) %>%
.$criteria %>%
t() %>%
as_tibble() %>%
mutate(nLags = 1:nrow(.)) %>%
select(nLags, everything()) %>%
kbl(digits = 3) %>%
kable_classic("striped", full_width = F)
library(tibble)
library(kableExtra)
VARselect(variables, lag.max = 6) %>%
.$criteria %>%
t() %>%
as_tibble() %>%
mutate(nLags = 1:nrow(.)) %>%
select(nLags, everything()) %>%
kbl(digits = 3) %>%
kable_classic("striped", full_width = F)
library(tibble)
library(kableExtra)
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Extract the criteria from the VARselect result
criteria <- var_select$criteria
# Create a tibble with the criteria and number of lags
criteria_tbl <- as_tibble(criteria) %>%
mutate(nLags = 1:nrow(.))
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Print the variable selection results
print(var_select)
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Print the variable selection results
print(var_select)
# Get the AIC values from VARselect
aic_values <- var_select$criteria$AIC
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Print the variable selection results
print(var_select)
# Get the AIC values from VARselect
aic_values <- var_select$criteria$AIC(n)
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Print the variable selection results
print(var_select)
# Get the AIC values from VARselect
aic_values <- var_select$criteria$AIC
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Print the variable selection results
print(var_select)
# Get the AIC values from VARselect
aic_values <- var_select$criteria[, "AIC"]
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Print the variable selection results
print(var_select)
# Get the AIC values from VARselect
aic_values <- var_select$criteria[, "AIC(n)"]
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Print the variable selection results
print(var_select)
# Perform variable selection using VARselect
var_select <- VARselect(data, lag.max = 6)
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Print the variable selection results
print(var_select)
# Get the AIC values from VARselect
aic_values <- var_select$criteria[, 1]  # Use column index 1 for AIC
# Find the lag order that minimizes AIC
selected_lag_order <- which.min(aic_values)
# Print the selected lag order
cat("Selected Lag Order based on AIC:", selected_lag_order, "\n")
library(forecast)
library(vars)
library(tidyverse)
library(knitr)
library(urca)
library(tseries)
library(xts)
