t() %>%
as_tibble() %>%
mutate(nLags = 1:nrow(.)) %>%
select(nLags, everything()) %>%
kbl(digits = 3) %>%
kable_classic("striped", full_width = F)
VARselect(data, lag.max = 6)
VARselect(data, lag.max = 6)
# Assuming your dataset is stored in a data frame called 'data' with multiple time series variables
# Load the 'vars' package for VAR modeling
library(vars)
# Handle missing values in the dataset
data_clean <- na.omit(data)
# Convert the cleaned data frame to a matrix
data_matrix <- as.matrix(data_clean)
# Perform variable selection using VARselect
var_select <- VARselect(data_matrix, lag.max = max_lag_order)
# Assuming your dataset is stored in a data frame called 'data' with multiple time series variables
# Load the 'vars' package for VAR modeling
library(vars)
# Handle missing values in the dataset
data_clean <- na.omit(data)
# Convert the cleaned data frame to a matrix
data_matrix <- as.matrix(data_clean)
# Perform variable selection using VARselect
var_select <- VARselect(data_matrix, lag.max = 10)
# Assuming your dataset is stored in a data frame called 'data' with multiple time series variables
# Load the 'vars' package for VAR modeling
library(vars)
# Handle missing values in the dataset
data_clean <- na.omit(data)
# Convert the cleaned data frame to a matrix
data_matrix <- as.matrix(data_clean)
# Perform variable selection using VARselect
var_select <- VARselect(data_matrix, lag.max = 6)
library(forecast)
library(vars)
library(tidyverse)
library(knitr)
library(urca)
library(tseries)
library(xts)
# Assuming your dataset is stored in a data frame called 'data' with multiple time series variables
# Load the 'vars' package for VAR modeling
library(vars)
# Handle missing values in the dataset
data_clean <- na.omit(data)
# Convert the cleaned data frame to a matrix
data_matrix <- as.matrix(data_clean)
# Perform variable selection using VARselect
var_select <- VARselect(data_matrix, lag.max = 6)
# Assuming your dataset is stored in a data frame called 'data' with multiple time series variables
# Load the 'vars' package for VAR modeling
library(vars)
# Handle missing values in the dataset
data_clean <- na.omit(data)
missing_values <- is.na(data)
# Convert the cleaned data frame to a matrix
data_matrix <- as.matrix(data_clean)
# Perform variable selection using VARselect
var_select <- VARselect(data_matrix, lag.max = 6)
# Perform variable selection using VARselect
var_select <- VARselect(data_matrix, lag.max = 6)
library(forecast)
library(vars)
library(tidyverse)
library(knitr)
library(urca)
library(tseries)
library(xts)
data <- read.csv("TSA_2023.csv")
sum(is.na(data))
data[, 1] <- as.Date(data[, 1], format = "%Y-%m-%d")
colnames(data)[1] <- "date"
head(data)
data %>% glimpse()
head(data)
tail(data)
variables <- data[, c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10")]
# Perform ADF test for each variable
adf_results <- lapply(data[-1], adf.test)
# Extract the test statistics and p-values
adf_stats <- sapply(adf_results, function(x) x$statistic)
adf_pvalues <- sapply(adf_results, function(x) x$p.value)
# Print the ADF test results for each variable
for (i in seq_along(adf_results)) {
cat("ADF Test Results for", colnames(data)[i+1], ":\n")
cat("Test statistic:", adf_stats[i], "\n")
cat("p-value:", adf_pvalues[i], "\n\n")
}
# Perform variable selection using VARselect
var_select <- VARselect(data_matrix, lag.max = 6)
# Perform variable selection using VARselect
var_select <- VARselect(data, lag.max = 6)
# Perform variable selection using VARselect
var_select <- VARselect(data, lag.max = 6)
sum(is.finite())
is.finite()
# Check if there are any finite values in each variable of the data
has_finite <- sapply(data, function(x) any(is.finite(x)))
# Check if there are any infinite values in each variable of the data
has_infinite <- sapply(data, function(x) any(is.infinite(x)))
# Perform variable selection using VARselect
var_select <- VARselect(data, lag.max = 6)
# Check if there are any infinite values in each variable of the data
has_infinite <- sapply(data, function(x) any(is.infinite(x)))
# Perform variable selection using VARselect
var_select <- VARselect(data, lag.max = 6)
# Perform variable selection using VARselect
var_select <- VARselect(data, lag.max = 6)
# Perform variable selection using VARselect
var_select <- VARselect(data, lag.max = 6)
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Print the variable selection results
print(var_select)
VARselect(data, lag.max = 6) %>%
.$criteria %>%
t() %>%
as_tibble() %>%
mutate(nLags = 1:nrow(.)) %>%
select(nLags, everything()) %>%
kbl(digits = 3) %>%
kable_classic("striped", full_width = F)
VARselect(variables, lag.max = 6) %>%
.$criteria %>%
t() %>%
as_tibble() %>%
mutate(nLags = 1:nrow(.)) %>%
select(nLags, everything()) %>%
kbl(digits = 3) %>%
kable_classic("striped", full_width = F)
VARselect(variables, lag.max = 6) %>%
.$criteria %>%
t() %>%
as_tibble() %>%
mutate(nLags = 1:nrow(.)) %>%
select(nLags, everything()) %>%
kbl(digits = 3) %>%
VARselect(variables, lag.max = 6) %>%
.$criteria %>%
t() %>%
as_tibble() %>%
mutate(nLags = 1:nrow(.)) %>%
select(nLags, everything()) %>%
kbl(digits = 3) %>%
kable_classic("striped", full_width = F)
library(vars)
library(tibble)
library(kableExtra)
install.packages("vars")
install.packages("tidyverse")
install.packages("knitr")
install.packages("urca")
install.packages("tseries")
install.packages("xts")
install.packages("forecast")
install.packages("kableExtra")
install.packages("urca")
install.packages("xts")
install.packages("forecast")
install.packages("knitr")
install.packages("tseries")
install.packages("vars")
install.packages("tidyverse")
install.packages("forecast")
library(vars)
library(tibble)
library(kableExtra)
VARselect(variables, lag.max = 6) %>%
.$criteria %>%
t() %>%
as_tibble() %>%
mutate(nLags = 1:nrow(.)) %>%
select(nLags, everything()) %>%
kbl(digits = 3) %>%
kable_classic("striped", full_width = F)
library(tibble)
library(kableExtra)
VARselect(variables, lag.max = 6) %>%
.$criteria %>%
t() %>%
as_tibble() %>%
mutate(nLags = 1:nrow(.)) %>%
select(nLags, everything()) %>%
kbl(digits = 3) %>%
kable_classic("striped", full_width = F)
library(tibble)
library(kableExtra)
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Extract the criteria from the VARselect result
criteria <- var_select$criteria
# Create a tibble with the criteria and number of lags
criteria_tbl <- as_tibble(criteria) %>%
mutate(nLags = 1:nrow(.))
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Print the variable selection results
print(var_select)
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Print the variable selection results
print(var_select)
# Get the AIC values from VARselect
aic_values <- var_select$criteria$AIC
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Print the variable selection results
print(var_select)
# Get the AIC values from VARselect
aic_values <- var_select$criteria$AIC(n)
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Print the variable selection results
print(var_select)
# Get the AIC values from VARselect
aic_values <- var_select$criteria$AIC
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Print the variable selection results
print(var_select)
# Get the AIC values from VARselect
aic_values <- var_select$criteria[, "AIC"]
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Print the variable selection results
print(var_select)
# Get the AIC values from VARselect
aic_values <- var_select$criteria[, "AIC(n)"]
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Print the variable selection results
print(var_select)
# Perform variable selection using VARselect
var_select <- VARselect(data, lag.max = 6)
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Print the variable selection results
print(var_select)
# Get the AIC values from VARselect
aic_values <- var_select$criteria[, 1]  # Use column index 1 for AIC
# Find the lag order that minimizes AIC
selected_lag_order <- which.min(aic_values)
# Print the selected lag order
cat("Selected Lag Order based on AIC:", selected_lag_order, "\n")
library(forecast)
library(vars)
library(tidyverse)
library(knitr)
library(urca)
library(tseries)
library(xts)
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
library(forecast)
library(vars)
library(tidyverse)
library(knitr)
library(urca)
library(tseries)
library(xts)
library(forecast)
library(vars)
library(tidyverse)
library(knitr)
library(urca)
library(tseries)
library(xts)
data <- read.csv("TSA_2023.csv")
sum(is.na(data))
data[, 1] <- as.Date(data[, 1], format = "%Y-%m-%d")
colnames(data)[1] <- "date"
head(data)
variables <- data[, c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10")]
# Perform ADF test for each variable
adf_results <- lapply(data[-1], adf.test)
# Extract the test statistics and p-values
adf_stats <- sapply(adf_results, function(x) x$statistic)
adf_pvalues <- sapply(adf_results, function(x) x$p.value)
# Print the ADF test results for each variable
for (i in seq_along(adf_results)) {
cat("ADF Test Results for", colnames(data)[i+1], ":\n")
cat("Test statistic:", adf_stats[i], "\n")
cat("p-value:", adf_pvalues[i], "\n\n")
}
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Print the variable selection results
print(var_select)
# Get the AIC values from VARselect
aic_values <- var_select$criteria[, 1]  # Use column index 1 for AIC
# Find the lag order that minimizes AIC
selected_lag_order <- which.min(aic_values)
# Print the selected lag order
cat("Selected Lag Order based on AIC:", selected_lag_order, "\n")
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Print the variable selection results
print(var_select)
# Get the AIC values from VARselect
aic_values <- var_select$criteria[, 3]  # Use column index 1 for AIC
# Find the lag order that minimizes AIC
selected_lag_order <- which.min(aic_values)
# Print the selected lag order
cat("Selected Lag Order based on AIC:", selected_lag_order, "\n")
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Print the variable selection results
print(var_select)
# Get the AIC values from VARselect
aic_values <- var_select$criteria[, 3]  # Use column index 1 for AIC
# Find the lag order that minimizes AIC
selected_lag_order <- which.min(aic_values)
# Print the selected lag order
cat("Selected Lag Order based on AIC:", selected_lag_order, "\n")
# Perform variable selection using VARselect
var_select <- VARselect(variables, lag.max = 6)
# Print the variable selection results
print(var_select)
# Get the AIC values from VARselect
aic_values <- var_select$criteria[, 3]  # Use column index 1 for AIC
# Find the lag order that minimizes AIC
selected_lag_order <- which.min(aic_values)
# Print the selected lag order
cat("Selected Lag Order based on AIC:", selected_lag_order, "\n")
# Estimate the VAR model with lag order 3
var_model <- VAR(variables, p = 3)  # Replace 'variables' with your dataset
# Print the summary of the VAR model
summary(var_model)
# Load the required package
library(urca)
# Perform the Johansen test
johansen_test <- ca.jo(var_model)
johansen_result <- ca.jo(variables, type = "trace", K = 5, ecdet = "none", spec = "longrun")
summary(johansen_result)# Perform the Johansen cointegration test with best lag from AIC
johansen_result <- ca.jo(variables, type = "trace", K = selected_lag_order, ecdet = "none", spec = "longrun")
johansen_result <- ca.jo(variables, type = "trace", K <- selected_lag_order, ecdet = "none", spec = "longrun")
johansen_result <- ca.jo(variables, type = "trace", K =3,  selected_lag_order, ecdet = "none", spec = "longrun")
johansen_result <- ca.jo(variables, type = "trace", K = 3, ecdet = "none", spec = "longrun")
summary(johansen_result)# Perform the Johansen cointegration test with best lag from AIC
variables <- data[, c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10")]
# Perform ADF test for each variable
adf_results <- lapply(data[-1], adf.test)
# Extract the test statistics and p-values
adf_stats <- sapply(adf_results, function(x) x$statistic)
adf_pvalues <- sapply(adf_results, function(x) x$p.value)
# Print the ADF test results for each variable
for (i in seq_along(adf_results)) {
cat("ADF Test Results for", colnames(data)[i+1], ":\n")
cat("Test statistic:", adf_stats[i], "\n")
cat("p-value:", adf_pvalues[i], "\n\n")
}
# Plot the variables
par(mfrow = c(5, 2))  # Adjust the layout for 10 variables
for (i in 1:10) {
plot(data[, i + 1], main = colnames(data)[i + 1], ylab = "Value")
}
variables <- data[, c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10")]
# Perform ADF test for each variable
adf_results <- lapply(data[-1], adf.test)
# Extract the test statistics and p-values
adf_stats <- sapply(adf_results, function(x) x$statistic)
adf_pvalues <- sapply(adf_results, function(x) x$p.value)
# Print the ADF test results for each variable
for (i in seq_along(adf_results)) {
cat("ADF Test Results for", colnames(data)[i+1], ":\n")
cat("Test statistic:", adf_stats[i], "\n")
cat("p-value:", adf_pvalues[i], "\n\n")
}
```{r}
variables <- data[, c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10")]
# Perform ADF test for each variable
adf_results <- lapply(data[-1], adf.test)
# Extract the test statistics and p-values
adf_stats <- sapply(adf_results, function(x) x$statistic)
adf_pvalues <- sapply(adf_results, function(x) x$p.value)
# Print the ADF test results for each variable
for (i in seq_along(adf_results)) {
cat("ADF Test Results for", colnames(data)[i+1], ":\n")
cat("Test statistic:", adf_stats[i], "\n")
cat("p-value:", adf_pvalues[i], "\n\n")
}
library(ggplot2)
# Create a data frame with the variables
df <- data.frame(date = data$date, variables)
# Convert the date column to a proper date format
df$date <- as.Date(df$date)
# Reshape the data from wide to long format for plotting
df_long <- tidyr::gather(df, key = "variable", value = "value", -date)
# Plot the variables
ggplot(data = df_long, aes(x = date, y = value, color = variable)) +
geom_line() +
labs(x = "Date", y = "Value", color = "Variable") +
theme_minimal()
differenced_variable <- diff(variable)
differenced_variable <- diff(variables)
dx_variables <- diff(variables)
dx_variables <- diff(data[-1])
dx_variables <- diff(variables)
dx1 <- diff.xts(data$x1)
dx2 <- diff.xts(data$x2)
dx3 <- diff.xts(data$x3)
dx4 <- diff.xts(data$x4)
dx5 <- diff.xts(data$x5)
dx6 <- diff.xts(data$x6)
dx7 <- diff.xts(data$x7)
dx8 <- diff.xts(data$x8)
dx9 <- diff.xts(data$x9)
dx10 <- diff.xts(data$x10)
data$dx1 <- dx1
data$dx2 <- dx2
data$dx3 <- dx3
data$dx4 <- dx4
data$dx5 <- dx5
data$dx6 <- dx6
data$dx7 <- dx7
data$dx8 <- dx8
data$dx9 <- dx9
data$dx10 <- dx10
dx_variables <- diff(variables)
dx_variables <- diff(variables)
# Create a data frame with the variables
df <- data.frame(date = data$date, dx_variables)
# Apply differencing
dx_variables <- diff(variables)
# Convert variables to numeric
variables2 <- apply(variables, 2, as.numeric)
# Apply differencing
dx_variables <- diff(variables)
# Apply differencing
dx_variables <- diff(data[, c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10")])
# Create an empty data frame to store the differenced variables
df_diff <- data.frame(date = data$date[-1])
# Compute differencing for each variable
for (i in 1:ncol(variables)) {
var_diff <- diff(variables[, i])
col_name <- colnames(variables)[i]
df_diff[col_name] <- var_diff
}
# Reshape the data from wide to long format for plotting
df_long <- tidyr::gather(df_diff, key = "variable", value = "value", -date)
# Plot the variables
ggplot(data = df_long, aes(x = date, y = value, color = variable)) +
geom_line() +
labs(x = "Date", y = "Value", color = "Variable") +
theme_minimal()
johansen_result <- ca.jo(df_diff, type = "trace", K = 3, ecdet = "none", spec = "longrun")
johansen_result <- ca.jo(df_long, type = "trace", K = 3, ecdet = "none", spec = "longrun")
# Create an empty data frame to store the differenced variables
df_diff <- data.frame(date = data$date[-1])
# Compute differencing for each variable
for (i in 1:ncol(variables)) {
var_diff <- diff(variables[, i])
col_name <- colnames(variables)[i]
df_diff[, col_name] <- var_diff  # Save the differenced variable in the data frame
}
# Reshape the data from wide to long format for plotting
df_long <- tidyr::gather(df_diff, key = "variable", value = "value", -date)
# Plot the variables
ggplot(data = df_long, aes(x = date, y = value, color = variable)) +
geom_line() +
labs(x = "Date", y = "Value", color = "Variable") +
theme_minimal()
johansen_result <- ca.jo(df_diff, type = "trace", K = 3, ecdet = "none", spec = "longrun")
# Apply ADF test to each differenced variable
adf_results <- lapply(df_diff[, -1], adf.test)
# Extract the test statistics and p-values
adf_stats <- sapply(adf_results, function(x) x$statistic)
adf_pvalues <- sapply(adf_results, function(x) x$p.value)
# Print the ADF test results for each differenced variable
for (i in seq_along(adf_results)) {
cat("ADF Test Results for", colnames(df_diff)[i+1], ":\n")
cat("Test statistic:", adf_stats[i], "\n")
cat("p-value:", adf_pvalues[i], "\n\n")
}
# Perform Johansen test
johansen_result <- ca.jo(df_diff[, -1], type = "trace", ecdet = "none")
# Print the results
summary(johansen_result)
# Perform Johansen test
johansen_result <- ca.jo(df_diff, type = "trace", ecdet = "none")
# Perform Johansen test
johansen_result <- ca.jo(df_diff[, -1], type = "trace", ecdet = "none")
# Print the results
summary(johansen_result)
# Extract the eigenvalues from the Johansen test results
eigenvalues <- c(0.8153845, 0.7830446, 0.6668660, 0.5873746, 0.5676961, 0.5463933, 0.5097186, 0.4565827, 0.3276016, 0.2509342)
# Set the significance level for determining cointegration
significance_level <- 0.05
# Find the number of cointegrated variables
num_cointegrated <- sum(eigenvalues > significance_level)
# Identify the cointegrated variables
cointegrated_variables <- colnames(variables)[1:num_cointegrated]
# Print the summary
cat("Number of cointegrated variables:", num_cointegrated, "\n")
cat("Cointegrated variables:", paste(cointegrated_variables, collapse = ", "), "\n")
# Extract the eigenvalues from the Johansen test results
eigenvalues <- c(0.8153845, 0.7830446, 0.6668660, 0.5873746, 0.5676961, 0.5463933, 0.5097186, 0.4565827, 0.3276016, 0.2509342)
# Set the significance level for determining cointegration
significance_level <- 0.05
# Find the number of cointegrated variables
num_cointegrated <- sum(eigenvalues > significance_level)
# Identify the cointegrated variables
cointegrated_variables <- colnames(df_diff[, -1])[1:num_cointegrated]
# Print the summary
cat("Number of cointegrated variables:", num_cointegrated, "\n")
cat("Cointegrated variables:", paste(cointegrated_variables, collapse = ", "), "\n")
